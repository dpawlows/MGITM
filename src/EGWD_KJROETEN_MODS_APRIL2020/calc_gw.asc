   ! ----------------------------------------------------------------------
   
   subroutine calc_gw(iBlock)

     use ModInputs
     use ModSources, only : GWDrag,GWIHeat,GWDHeat, &
	GW_net_heating,GW_flux_tot,GW_brunt,GW_flux, &
	GW_drag,GW_var_tot
     use ModPlanet
     use ModGITM
     use ModConstants, only : PI
     use ModIndicesInterfaces
     use ModTime

!^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
!***EYGwave REQUIRES MKS UNITS***
!   IN:  MGITM mks ---> EGWD MKS
!   OUT: EGWD MKS --->  MGITM mks
!^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
! Original code of E. Yigit for Earth
! Modified for Mars by A. Medvedev and E. Yigit
! Incorporated into MGITM by K. Roeten and S. Bougher (Summer 2018)
!^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

 implicit none

  ! INPUTS:----------------------------------------------------------

  integer,intent(in):: iBlock

!  -----------------------------------------------------------------
! Input variables: Standard (drag only)

! Args:
!     INTEGER, PARAMETER  :: ht_dim = 120         !Number vertical levels (interfaces)
      INTEGER, PARAMETER  :: ht_dim = nAlts       !Number vertical levels (interfaces)
!     INTEGER, PARAMETER  :: SLEV = 3             !Source level (top of conv. boundary layer ~8 km)
      INTEGER, PARAMETER  :: SLEV = 4             !Source level (top of conv. boundary layer ~10 km)
      INTEGER, PARAMETER  :: nh = 28              !Number of harmonics (Zalucha,2013)
!     INTEGER, PARAMETER  :: nh = 30              !Number of harmonics (25-50 range)

!  CONSTANTS:
!     REAL, PARAMETER ::   PI =  3.14159265358979312
!     REAL, PARAMETER ::   RGAS2 = gask/43.48*1.e-4       ! Pure CO2 [erg/K/gm] -> [J/K/kg]
      REAL, PARAMETER ::   RGAS2 = 8.314E+07/43.48*1.e-4  ! Pure CO2 [erg/K/gm] -> [J/K/kg]
!     REAL, PARAMETER ::   GRAV = 373.*0.01               ! [cm/s^2] -> [m/s^2]

! Spectral parameters  (Mars)
      REAL, PARAMETER   :: flux0    = 0.0025
!     REAL, PARAMETER   :: flux0    = 0.00125
!     REAL, PARAMETER   :: flux0    = 0.025
      REAL, PARAMETER   :: cw       = 35.
!     REAL, PARAMETER   :: cw       = 40.
      REAL, PARAMETER   :: max_cp_y = 80.0  !(m/s) (with nh=30)
!     REAL, PARAMETER   :: max_cp_y = 100.0 !(m/s) (with nh=30)
      REAL, PARAMETER   :: kx       = 2.*pi/300.e3 !lambda_x= 100 to 300 km
!     REAL, PARAMETER   :: kx       = 2.*pi/100.e3 !lambda_x= 100 to 300 km
!     REAL, PARAMETER   :: max_ht = 200.e3 !No calc above this height (traditional avg exobase)
!                          Also required for assuming pure CO2 atmosphere (below).
      REAL, PARAMETER   :: max_ht = 300.e3 !No calc above this height (model top)

!----------------------------------------------------------------------

! Local Variables (for MGITM loops)
     integer :: ilon,ilat,ialt
! Local Variables (for EGWD2 1-D code loops)
      INTEGER :: i, j, k, n, nd, m, il
 
  !  -----------------------------------------------------------------
  ! Input 3-D fields (8) recast from MarsGITM (4-D+ fields)
  ! Setup section:  from MGITM inputs  (all mks units!)
  !  -----------------------------------------------------------------

  real,dimension(1:nLons,1:nLats,1:nAlts) ::    &
       TN, UN, VN, PN, CPN, HTN, KMN, GRAVN

  real,dimension(1:nLons,1:nLats,1:nAlts) ::    &
       mnd, vmro, vmrco, vmrn2, vmrco2, mmean 

  !  -----------------------------------------------------------------
  ! Output 3-D fields (4) later recast from EGWD2 code into MarsGITM
  ! (4-D+ fields), (all mks units!)
  !  -----------------------------------------------------------------

! Output args: for passing to duv.F 
      real,dimension(1:nLons,1:nLats,1:nAlts) :: udrag, vdrag  
     !  zonal and meridional momentum drag (m/s/s)

! Output args: for passing to dt.F 
      real,dimension(1:nLons,1:nLats,1:nAlts) :: gwheat_ir, gwheat_dif
     !  irreversible heating (K/s), differential heating/cooling (K/s)

! Output args: for testing of diagnostic intermediate variables
      real,dimension(1:nLons,1:nLats,1:nAlts) :: net_heating_t, &
        flux_tot_t,brunt_t,flux_t,drag_t,var_tot_t

!  -----------------------------------------------------------------
! Internal Input variables to Yigit 1-D routine
!  -----------------------------------------------------------------

      REAL  :: vy1d(ht_dim)   !v-wind
      REAL  :: vx1d(ht_dim)   !u-wind
      REAL  :: temp1d(ht_dim) !temp
      REAL  :: cp1d(ht_dim)   !Cp
      REAL  :: h(ht_dim)      !geopotential height (in m)
      REAL  :: pres(ht_dim)   !pressure (in Pa)
      REAL  :: rho2(ht_dim)   !density (in Kg/m3)
      REAL  :: rgass(ht_dim)  !rgas species mixture
      REAL  :: v_eddy(ht_dim)=0.0  !eddy viscosity (=null)
      REAL  :: eden(ht_dim)=0.0 ! electron density (=null)
      REAL  :: GRAV1d(ht_dim) !variable gravity for 1d code

! Internal Output variables
      REAL :: ut_gwd(ht_dim)
      REAL :: vt_gwd(ht_dim)

! GW heating terms
      REAL :: gwh_ir(ht_dim) !irreversible heating (K/s)
      REAL :: gwh_dif(ht_dim)!Differential heating/cooling (K/s)
      REAL :: scht1d(ht_dim)             ! 1D scale height

      REAL :: m_vis(ht_dim)              ! molecular kinematic viscosity (mixture)
      REAL :: var_tot(ht_dim)  = 0.
      REAL :: flux_tot(ht_dim) = 0.
      REAL :: net_heating(ht_dim)=0.

!-----------

! mid-point variables
      REAL :: temp1d_m(ht_dim)
      REAL :: u_source_m(ht_dim)
      REAL :: pres_m(ht_dim)
      REAL :: rho_m(ht_dim)
      REAL :: h_m(ht_dim)
      REAL :: eden_m(ht_dim)
      REAL :: scht1d_m(ht_dim)

      REAL :: drag(ht_dim,nh) = 0.

      REAL :: phasespeed(nh)              ! Phase speed
      REAL :: uw_mom(nh) = 0.
      REAL :: brunt(ht_dim) = 0.02        ! Buoyancy frequency
      REAL :: theta(ht_dim), thetap(ht_dim)
      INTEGER :: b_lev(nh), c_lev(nh)
      REAL :: dz(ht_dim), rho_pr(ht_dim)

! Dissipation variables
      REAL :: tau(ht_dim, nh)      = 1.
      REAL :: beta(ht_dim, nh)     = 0.
      REAL :: beta_dif(ht_dim,nh)  = 0.
      REAL :: beta_mol(ht_dim,nh)  = 0.
      REAL :: beta_nc(ht_dim,nh)   = 0.
      REAL :: beta_non(ht_dim,nh)  = 0.
      REAL :: beta_cond(ht_dim,nh) = 0.
      REAL :: beta_eddy(ht_dim,nh) = 0.
      REAL :: beta_ion(ht_dim,nh)  = 0.

      REAL :: fac1, fac2  ! Factors to simplify the dissipation variable

      REAL :: alpha(ht_dim)        = 0. ! Newtonian cooling coefficient
      REAL :: vin(ht_dim)          = 0. ! ion-neutral collision frequency

      REAL :: c_int(ht_dim,nh)
      REAL :: sign_c(ht_dim,nh)
      REAL :: flux(ht_dim,nh) = 0.
      REAL :: up(ht_dim,nh)   = 0.
      REAL :: upSq(ht_dim,nh) = 0.

! Total horizontal wind variance at the source level
      REAL :: sigmaSq_s=0., rms

      INTEGER :: sgn(nh)

! Nonlinearity parameters
      REAL :: sigma(ht_dim,nh)=0.
      REAL :: sigmaSq(ht_dim,nh)=0.
      REAL :: alpha_ins(ht_dim,nh)=0.

      REAL, PARAMETER   :: S2  = 1.4142136d0 ! (2.**0.5
      REAL, PARAMETER   :: S2P = 2.5066283d0 ! (2.*pi)**0.5

! Anisotropy variables
      REAL  :: u_source(ht_dim)
      REAL  :: gwd(ht_dim)      = 0.
      REAL  :: gwh(ht_dim)      = 0.
      REAL  :: gwhd(ht_dim)     = 0.
      REAL  :: xv, yv

      tau(:,:)     = 1.;    gwd(:)       = 0.;   gwh(:)       = 0.
      gwhd(:)      = 0.;    drag(:,:)    = 0.
      sigmaSq(:,:) = 0.;    beta(:,:)    = 0.;   flux_tot(:)  = 0.
      var_tot(:)   = 0.;    upSq(:,:)    = 0.;   up(:,:)      = 0.
      flux(:,:)    = 0.;    beta_non(:,:)= 0.



  !  -----------------------------------------------------------------
  ! Input 3-D fields recast from MarsGITM (4-D+ fields)
  ! Setup section:  from MGITM inputs  (all mks units!)
  !  -----------------------------------------------------------------

  !  Mars GITM real temperature (on its grid)  ----------------------

  TN(1:nLons,1:nLats,1:nAlts) = &
       Temperature(1:nLons,1:nLats,1:nAlts,iBlock)*  &
       TempUnit(1:nLons,1:nLats,1:nAlts)


  !  Mars GITM zonal/meridional velocities in m/sec (on its grid) ---  

  UN(1:nLons,1:nLats,1:nAlts) = &
           Velocity(1:nLons,1:nLats,1:nAlts,iEast_,iBlock)+1.0E-4
  VN(1:nLons,1:nLats,1:nAlts) = &
           Velocity(1:nLons,1:nLats,1:nAlts,iNorth_,iBlock)+1.0E-4


  !  Mars GITM pressure in pascals  (on its grid) -------------------

  PN(1:nLons,1:nLats,1:nAlts) = &
       Pressure(1:nLons,1:nLats,1:nAlts,iBlock)


  !     Mars GITM heights in meters  (on its grid) -------------------

  HTN(1:nLons,1:nLats,1:nAlts) = &
        Altitude_GB(1:nLons,1:nLats,1:nAlts,iBlock)

 
  !     Mars GITM cp in J/kg/K (on its grid) -------------------
  !     (same units as LMD-MGCM cooling code, and will vary with altitude)
  !     (cpco2 = 8.4e+06 erg/gm/K = 0.84 J/gm/K = 8.4e-04 J/kg/K)

  CPN(1:nLons,1:nLats,1:nAlts) = &
       cp(1:nLons,1:nLats,1:nAlts,iBlock)

  GRAVN(1:nLons,1:nLats,1:nAlts) = &
       Gravity_GB(1:nLons,1:nLats,1:nAlts,iBlock)

!    Volume Mixing Ratio amd MWT Calculations

  mnd(1:nLons,1:nLats,1:nAlts) = &
       NDensity(1:nLons,1:nLats,1:nAlts,iBlock)+1.0
  vmro(1:nLons,1:nLats,1:nAlts)  = &
       NdensityS(1:nLons,1:nLats,1:nAlts,iO_,iBlock)&
       /mnd(1:nLons,1:nLats,1:nAlts)
  vmrco(1:nLons,1:nLats,1:nAlts) = &
       NdensityS(1:nLons,1:nLats,1:nAlts,iCO_,iBlock)&
       /mnd(1:nLons,1:nLats,1:nAlts)
  vmrn2(1:nLons,1:nLats,1:nAlts) = &
       NdensityS(1:nLons,1:nLats,1:nAlts,iN2_,iBlock)&
       /mnd(1:nLons,1:nLats,1:nAlts)
  vmrco2(1:nLons,1:nLats,1:nAlts) = &
       NdensityS(1:nLons,1:nLats,1:nAlts,iCO2_,iBlock)&
       /mnd(1:nLons,1:nLats,1:nAlts)

!  mean molecular mass (gm/molecule) = mean molecular weight(gm/mole)/
!                                      Avogardos number(molecules/mole)

!  (gm/molecule)
! mmean(1:nLons,1:nLats,1:nAlts) = &
!      (vmro(1:nLons,1:nLats,1:nAlts)*16.+ &
!      (vmrco(1:nLons,1:nLats,1:nAlts)+vmrn2(1:nLons,1:nLats,1:nAlts))&
!      *28. + vmrco2(1:nLons,1:nLats,1:nAlts)*44.)/  &
!      Avogadros_Number
!  (gm/mole) = mmwt
  mmean(1:nLons,1:nLats,1:nAlts) = &
       (vmro(1:nLons,1:nLats,1:nAlts)*16.+ &
       (vmrco(1:nLons,1:nLats,1:nAlts)+vmrn2(1:nLons,1:nLats,1:nAlts))&
       *28. + vmrco2(1:nLons,1:nLats,1:nAlts)*44.)

  !  Mars Molecular Viscosity (only) on its grid ---------------------

  KMN(1:nLons,1:nLats,1:nAlts) = &
       VISC_3D(1:nLons,1:nLats,1:nAlts,iBlock)


!========================================================================
! Internal 3-D fields recast from MarsGITM (4-D+ fields)
! Stuffing section:  MGITM inputs into 1-D EYGwave variables, all in mks
!========================================================================

!---initialize output---
      udrag(1:nLons,1:nLats,1:nAlts)      = 0.0
      vdrag(1:nLons,1:nLats,1:nAlts)      = 0.0
      gwheat_ir(1:nLons,1:nLats,1:nAlts)  = 0.0
      gwheat_dif(1:nLons,1:nLats,1:nAlts) = 0.0

      net_heating_t(1:nLons,1:nLats,1:nAlts)= 0.0
      flux_tot_t(1:nLons,1:nLats,1:nAlts)   = 0.0
      brunt_t(1:nLons,1:nLats,1:nAlts)      = 0.0
      flux_t(1:nLons,1:nLats,1:nAlts)       = 0.0
      drag_t(1:nLons,1:nLats,1:nAlts)       = 0.0
      var_tot_t(1:nLons,1:nLats,1:nAlts)    = 0.0


!---------------Start MGITM Longitude loop------------------
      do ilon=1,nLons

!---------------Start MGITM latitude loop------------------
      do ilat=1,nLats

!-----------------------------------------------------
!    Setup 1-D arrays for application in Yigit 1-D code
!    -- Assume that m_vis is for pure CO2 below 200 km
!-----------------------------------------------------
!

!  Initialize variables 

     do k=1,ht_dim
	 flux_tot(k)   = 0.
	 var_tot(k)    = 0.
	 sigmaSq(k,:)  = 0.
	 beta(k,:)     = 0.
	 tau(k,:)      = 1.
	 gwd(k)	       = 0.
	 gwh(k)        = 0.
	 gwhd(k)       = 0.
	 drag(k,:)     = 0.
 	 upSq(k,:)     = 0.
	 up(k,:)       = 0.
	 flux(k,:)     = 0.
	 beta_non(k,:) = 0.
     enddo

!  Pull values from MGITM

      do k = 1,ht_dim
         vx1D(k)   = UN(ilon,ilat,k)                    ! [m/s]
         vy1D(k)   = VN(ilon,ilat,k)                    ! [m/s]
         temp1D(k) = TN(ilon,ilat,k)                    ! [K]
         cp1d(k)   = CPN(ilon,ilat,k)                   ! [J/K/kg]
         m_vis(k)  = KMN(ilon,ilat,k)                   ! [kg/m/sec]
         h(k)      = HTN(ilon,ilat,k)                   ! [m]
         pres(k)   = PN(ilon,ilat,k)                    ! [Pa]
	 RGASS(k)  = RGAS2*43.48/mmean(ilon,ilat,k)     ! [J/K/kg] (Mixture)
	 GRAV1d(k) = -1.0*GRAVN(ilon,ilat,k)		! [m/s^2]
      enddo ! K-loop

!  Calculate rho

      do k=1,ht_dim
        rho2(k) = pres(k)/(RGASS(k)*temp1d(k))               ! kg/m3
      enddo



!========================================================================
!--------- BEGIN GW CALC. ----------  NOT touched from E. Yigit
!========================================================================
! Project the upper level winds onto the source level winds
      PROJECTION : DO n = SLEV, ht_dim
       IF(n.eq.SLEV) THEN
          u_source(n) = SQRT(vy1d(n)*vy1d(n) + vx1d(n)*vx1d(n))
          IF(u_source(n).eq.0.) u_source(n) = 1.
          yv = vy1d(n)/u_source(n)
          xv = vx1d(n)/u_source(n)
       ENDIF
          u_source(n) = vy1d(n)*yv + vx1d(n)*xv
      ENDDO PROJECTION

!     theta(:) = temp1d(:)*(pres(1)/pres(:))**(RGAS2/cp1d(:))
      theta(:) = temp1d(:)*(pres(1)/pres(:))**(RGASS(:)/cp1d(:))
!     scht1d(:)= temp1d(:)*RGAS2/GRAV
!     scht1d(:)= temp1d(:)*RGASS(:)/GRAV
      scht1d(:)= temp1d(:)*RGASS(:)/GRAV1d(:)

! Mid-point values of model variables
      MID_POINT : DO n = 1, ht_dim-1
         temp1d_m(n)   = 0.5*(temp1d(n)   + temp1d(n+1))
         u_source_m(n) = 0.5*(u_source(n) + u_source(n+1))
         pres_m(n)     = 0.5*(pres(n)     + pres(n+1))
         rho_m(n)      = 0.5*(rho2(n)     + rho2(n+1))
         h_m(n)        = 0.5*(h(n)        + h(n+1))
         eden_m(n)     = 0.5*(eden(n)     + eden(n+1))
         scht1d_m(n)   = 0.5*(scht1d(n)   + scht1d(n+1))
      ENDDO MID_POINT

! Brunt frequency and background parameters
      BACKGROUND1: DO n = 1, ht_dim-1
         dz(n)    = h(n+1) - h(n)                ! Midpoint value
         rho_pr(n)= (rho2(n+1) - rho2(n))/dz(n)    ! Midpoint value

! For Mars and Venus (pure CO2 atmosphere) : OK below ~200 km.
!        m_vis(n) = 3.128e-7*temp1d_m(n)**0.69/rho_m(n)+1.e-1
! Use m.viscosity from M-GITM instead (species variation with altitude)
         m_vis(n) = m_vis(n)/rho_m(n)+1.e-1

! Ion friction (Currently zero for Venus)
!        vin(n)  = 7.22e-17*temp1d_m(n)**0.37*eden_m(n)
         vin(n)  = 0d0
! Newtonian cooling (off for now)
!        alpha(n) = 3.e-6*(1.2+TANH(-7.*LOG(pres_m(n)/100000.)-50.)*0.833)
      ENDDO BACKGROUND1

      BACKGROUND2: DO n=1, ht_dim-1
         thetap(n)= (theta(n+1) - theta(n))/dz(n) ! gradient of theta
!        brunt(n) = (ABS((2*GRAV/(theta(n)+theta(n+1)))*thetap(n)))
         brunt(n) = (ABS((2*GRAV1d(n)/(theta(n)+theta(n+1)))*thetap(n)))
         brunt(n) = sqrt(brunt(n))
      ENDDO BACKGROUND2

!     WRITE(6,*) "EY Gravity Wave Spectrum"
!     WRITE(6,*) " i      Phasespeed      Flux         U_prime       Sigma_sq_tot    Hwhm"
!     WRITE(6,*) "          [ms-1]       [m2s-2]        [m/s]           [m2s-2]"
!     WRITE(6,*)

      SPECTRUM : DO i = 1, nh
         IF(i.eq.1)  phasespeed(i) = -max_cp_y  !80.
         IF(i.GE.2)  phasespeed(i) = phasespeed(i-1)  &
                       *((max_cp_y/2)**(-1./((nh/2.)-1.)))

         IF(i.eq.(nh/2+1))   phasespeed(i) = 2.
         IF(i.GE.(nh/2+2)) phasespeed(i) = phasespeed(i-1)  &
                            *((max_cp_y/2)**(1./((nh/2.)-1.)))
      ENDDO SPECTRUM

         flux_tot(SLEV)=0.
         var_tot(SLEV)=0.

      SPECTRUM2: DO i = 1, nh

! --- Case B: Asymmetric/Shifted spectrum by local winds at source height---------------
         sgn(i) = (phasespeed(i)-u_source_m(SLEV))  &
                 /(ABS(phasespeed(i)-u_source_m(SLEV)))
         uw_mom(i) = sgn(i)  &
           *(flux0*EXP(-((phasespeed(i)-u_source_m(SLEV))/cw)**2))
! ----------------------------------------------------------------------------

! ---  Case A: Assumes no shift in spectrum by local winds at source height-------------
! ---- Symmetric spectrum ---------------------------
!        sgn(i)    = phasespeed(i)/ABS(phasespeed(i))
!        uw_mom(i) = sgn(i)*(flux0*EXP(-(phasespeed(i)/cw)**2))
!----------------------------------------------------

         tau(SLEV,i)  = 1.
         flux(SLEV,i) = uw_mom(i)
         flux_tot(SLEV)=flux_tot(SLEV) + flux(SLEV,i)
         c_int(SLEV,i)  = phasespeed(i) - u_source_m(SLEV)
         IF(abs(c_int(SLEV,i)) .ge. brunt(SLEV)*100.) upSq(SLEV,i)  &
                 = ABS(uw_mom(i))*brunt(SLEV)/(kx*ABS(c_int(SLEV,i)))
         IF(ABS(upSq(SLEV,i)).GT.0.) up(SLEV,i) = SQRT(upSq(SLEV,i))
         IF (c_int(SLEV,i).NE.0) sign_c(SLEV,i) =  &
                               c_int(SLEV,i)/ABS(c_int(SLEV,i))
         IF (c_int(SLEV,i).EQ.0) sign_c(SLEV,i) = 1.

         var_tot(SLEV) = var_tot(SLEV) + upSq(SLEV,i)

	sigmaSq(SLEV,i)=0. 
	sigmaSq(SLEV+1,i)=0.
	

      ENDDO SPECTRUM2

      c_lev(:) = -1
      b_lev(:) = -1

! Altitude loop starts
      HT_LOOP : DO n = SLEV+1, ht_dim-1
       ! phasespeed loop
        PS_LOOP : DO i = 1, nh

          IF(h(n) > max_ht) CYCLE

          c_int(n,i)  = phasespeed(i) - u_source_m(n)
          IF(c_int(n,i).NE.0) sign_c(n,i) = c_int(n,i)/ABS(c_int(n,i))
          IF(c_int(n,i).EQ.0) sign_c(n,i) = 1.

          CRITICAL : IF(c_lev(i).LT.0  &
                       .AND. (sign_c(n,i).NE.sign_c(n-1,i)  &
                       .AND. c_int(n,i).NE.0.)) THEN
                       c_lev(i) = n
                       flux(n,i)  = 0.

           ELSE IF (c_lev(i).LT.0) THEN
             fac1      = 2.*brunt(n)*brunt(n)*brunt(n)  &
                        /(kx*c_int(n,i)**4)
             fac2      = 2.*brunt(n)/(kx*c_int(n,i)*c_int(n,i))
             beta(n,i) = fac1*(m_vis(n)+v_eddy(n))  &
                        + fac2*(vin(n)+alpha(n))
		
             NON_LINEARITY : DO j = 1, nh
                c_int(n,j) = phasespeed(j) - u_source_m(n)
                IF (ABS(c_int(n,i)) .GE. ABS(c_int(n,j))) THEN
                   sigmaSq(n,i) = sigmaSq(n,i) + upSq(n-1,j)
                ENDIF
             ENDDO NON_LINEARITY

             IF(sigmaSq(n,i).ge.1e-36) THEN
                sigma(n,i)     = SQRT(sigmaSq(n,i))
                alpha_ins(n,i) = ABS(c_int(n,i))/S2/sigma(n,i)
                IF(alpha_ins(n,i).GE.1e10) THEN
                   beta_non(n,i) = 0.
                ELSE
                   beta_non(n,i)  = S2P*brunt(n)/sigma(n,i)  &
                                  *EXP(-alpha_ins(n,i)*alpha_ins(n,i))
                ENDIF
             ENDIF

             beta(n,i) = beta(n,i) + beta_non(n,i)
             tau(n,i)  = tau(n-1,i)  &
                          *EXP(-dz(n)*(beta(n,i)+beta(n-1,i))*0.5)
             flux(n,i) = uw_mom(i)*rho2(SLEV)/rho2(n)*tau(n,i)
             upSq(n,i) = ABS(flux(n,i))*brunt(n)/kx/ABS(c_int(n,i))
             IF(ABS(upSq(n,i)).GT.0.) up(n,i) = SQRT(upSq(n,i))

             drag(n,i) = beta(n,i)*flux(n,i)

             IF(alpha_ins(n,i).LT.0.75) drag(n,i) = 0.

             flux_tot(n) = flux_tot(n) + flux(n,i)
             var_tot(n)  = var_tot(n)  + upSq(n,i)
             gwd(n)    = gwd(n) + drag(n,i)
             gwh(n)    = gwh(n) + drag(n,i)*c_int(n,i)/cp1d(n)
!            gwhd(n)   = gwhd(n) + ((scht1d_m(n)/2./RGAS2/rho_m(n))*  &
!                 ( rho_pr(n)*c_int(n,i)*drag(n,i)  +  &
!                 rho_m(n)*((c_int(n,i)-c_int(n-1,i))/dz(n))*drag(n,i)+  &
!                 rho_m(n)*c_int(n,i)*((drag(n,i)-drag(n-1,i))/dz(n))))
             gwhd(n)   = gwhd(n) + ((scht1d_m(n)/2./RGASS(n)/rho_m(n))*  &
                  ( rho_pr(n)*c_int(n,i)*drag(n,i)  +  &
                  rho_m(n)*((c_int(n,i)-c_int(n-1,i))/dz(n))*drag(n,i)+  &
                  rho_m(n)*c_int(n,i)*((drag(n,i)-drag(n-1,i))/dz(n))))
          ENDIF CRITICAL
        ENDDO PS_LOOP
      ENDDO HT_LOOP

! Back-interpolate the drag onto the model full-levels.
      DO n=2, ht_dim-1
         gwd(n) = 0.5*(gwd(n) + gwd(n-1))
         gwh(n) = 0.5*(gwh(n) + gwh(n-1))
      ENDDO

      SMOOTH : DO n = 2, ht_dim-1
        ! Do 2 delta smoothing of drag at full-levels
        gwd(n)  = (gwd(n-1)  + 2.*gwd(n)  + gwd(n+1))*0.25
        gwh(n)  = (gwh(n-1)  + 2.*gwh(n)  + gwh(n+1))*0.25
        gwhd(n) = (gwhd(n-1) + 2.*gwhd(n) + gwhd(n+1))*0.25
      ENDDO SMOOTH
      gwd(ht_dim) = gwd(ht_dim-1)

      BACK_PROJECT : DO n=SLEV, ht_dim
        ut_gwd(n) = xv * gwd(n)
        vt_gwd(n) = yv * gwd(n)
        gwh_ir(n) = gwh(n)
        gwh_dif(n)= gwhd(n)
        net_heating(n) = gwhd(n) + gwh(n)          ! Newly Added
      ENDDO BACK_PROJECT

!---Update/convert output---           (Test version 8/30/18)
      do k = 1,ht_dim
        udrag(ilon,ilat,k) = ut_gwd(k)             ![m/s^2]
        vdrag(ilon,ilat,k) = vt_gwd(k)             ![m/s^2]
        gwheat_ir(ilon,ilat,k)  = gwh(k)           ![K/s]
        gwheat_dif(ilon,ilat,k) = gwhd(k)          ![K/s]

!       Additional variables to dianose

	net_heating_t(ilon,ilat,k) = net_heating(k)
	flux_tot_t(ilon,ilat,k)    = flux_tot(k)
	brunt_t(ilon,ilat,k)	   = brunt(k)
	flux_t(ilon,ilat,k)	   = flux(k,nh)
	drag_t(ilon,ilat,k)	   = drag(k,nh)
	var_tot_t(ilon,ilat,k)	   = var_tot(k)


      enddo ! K-loop

     enddo ! LAT-loop
! -----------------------------------------------------------------------
    enddo ! LON-loop
! -----------------------------------------------------------------------
! Stuff 3-D internal arrays back into MGITM allocated arrays for usage
  GWDrag(1:nLons,1:nLats,1:nAlts,iEast_,iBlock) = &
        udrag(1:nLons,1:nLats,1:nAlts)             ![m/s^2]
  GWDrag(1:nLons,1:nLats,1:nAlts,iNorth_,iBlock) = &
        vdrag(1:nLons,1:nLats,1:nAlts)             ![m/s^2]
  GWIHeat(1:nLons,1:nLats,1:nAlts,iBlock) = &
        gwheat_ir(1:nLons,1:nLats,1:nAlts)         ![K/s]
  GWDHeat(1:nLons,1:nLats,1:nAlts,iBlock) = &
        gwheat_dif(1:nLons,1:nLats,1:nAlts)        ![K/s]

  GW_net_heating(1:nLons,1:nLats,1:nAlts,iBlock) = &
	net_heating_t(1:nLons,1:nLats,1:nAlts)
  GW_flux_tot(1:nLons,1:nLats,1:nAlts,iBlock) = &
	flux_tot_t(1:nLons,1:nLats,1:nAlts)
  GW_brunt(1:nLons,1:nLats,1:nAlts,iBlock) = &
	brunt_t(1:nLons,1:nLats,1:nAlts)
  GW_flux(1:nLons,1:nLats,1:nAlts,iBlock) = &
	flux_t(1:nLons,1:nLats,1:nAlts)
  GW_drag(1:nLons,1:nLats,1:nAlts,iBlock) = &
	drag_t(1:nLons,1:nLats,1:nAlts)
  GW_var_tot(1:nLons,1:nLats,1:nAlts,iBlock) = &
	var_tot_t(1:nLons,1:nLats,1:nAlts)

!---------------------------------------------------------+
! Set all EGWD2 values to zero. So there will be
! no effect upon the wind speeds or Ts, but all components
! of this subroutine will have been exercised
!     GWDrag = 0.0
      GWIHeat = 0.0
      GWDHeat = 0.0
!     write(*,*) GWDrag(1,1,:,1,1)
!---------------------------------------------------------+

   END subroutine CALC_GW
